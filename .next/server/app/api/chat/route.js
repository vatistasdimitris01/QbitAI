/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cant10%5CDownloads%5CQbitAI-main%5CQbitAI-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cant10%5CDownloads%5CQbitAI-main%5CQbitAI-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cant10%5CDownloads%5CQbitAI-main%5CQbitAI-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cant10%5CDownloads%5CQbitAI-main%5CQbitAI-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_ant10_Downloads_QbitAI_main_QbitAI_main_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/chat/route.ts */ \"(rsc)/./src/app/api/chat/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([C_Users_ant10_Downloads_QbitAI_main_QbitAI_main_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_16__]);\nC_Users_ant10_Downloads_QbitAI_main_QbitAI_main_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_16__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\ant10\\\\Downloads\\\\QbitAI-main\\\\QbitAI-main\\\\src\\\\app\\\\api\\\\chat\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_ant10_Downloads_QbitAI_main_QbitAI_main_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/chat/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cant10%5CDownloads%5CQbitAI-main%5CQbitAI-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cant10%5CDownloads%5CQbitAI-main%5CQbitAI-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/chat/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/chat/route.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_google__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ai-sdk/google */ \"@ai-sdk/google\");\n/* harmony import */ var _ai_sdk_google_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/google/internal */ \"@ai-sdk/google/internal\");\n/* harmony import */ var ai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ai */ \"(rsc)/./node_modules/ai/dist/index.mjs\");\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_ai_sdk_google__WEBPACK_IMPORTED_MODULE_0__, _ai_sdk_google_internal__WEBPACK_IMPORTED_MODULE_1__]);\n([_ai_sdk_google__WEBPACK_IMPORTED_MODULE_0__, _ai_sdk_google_internal__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n// Initialize the Google AI models\nconst modelR1 = (0,_ai_sdk_google__WEBPACK_IMPORTED_MODULE_0__.google)('gemini-2.5-flash');\nconst modelR2 = (0,_ai_sdk_google__WEBPACK_IMPORTED_MODULE_0__.google)('gemini-2.5-pro');\nasync function POST(req) {\n    try {\n        console.log('API route called');\n        // Check request size\n        const contentLength = req.headers.get('content-length');\n        console.log('Request content length:', contentLength);\n        if (contentLength && parseInt(contentLength) > 10 * 1024 * 1024) {\n            console.log('Request too large:', contentLength);\n            return next_server__WEBPACK_IMPORTED_MODULE_2__.NextResponse.json({\n                error: 'Request too large. Please reduce file size.'\n            }, {\n                status: 413\n            });\n        }\n        const { messages, modelType = 'fast', webSearchResults = [], selectedModel = 'qbit R1' } = await req.json();\n        console.log('Received request:', {\n            messagesCount: messages.length,\n            modelType,\n            selectedModel,\n            hasFiles: messages.some((msg)=>Array.isArray(msg.content) && msg.content.some((item)=>item.type === 'file'))\n        });\n        // Filter out messages without content and ensure proper format\n        const validMessages = messages.filter((msg)=>{\n            if (Array.isArray(msg.content)) {\n                // For file content, check if there's at least one text item or file\n                return msg.content.some((item)=>item.type === 'text' && item.text?.trim() || item.type === 'file' && item.data);\n            }\n            return msg.content && typeof msg.content === 'string' && msg.content.trim() !== '';\n        }).map((msg)=>{\n            if (Array.isArray(msg.content)) {\n                // Handle file content - keep the original format for Google AI SDK\n                return {\n                    role: msg.role === 'user' ? 'user' : 'assistant',\n                    content: msg.content\n                };\n            }\n            return {\n                role: msg.role === 'user' ? 'user' : 'assistant',\n                content: msg.content\n            };\n        });\n        // Add web search results to the last user message if available\n        if (webSearchResults.length > 0 && validMessages.length > 0) {\n            const lastMessage = validMessages[validMessages.length - 1];\n            if (lastMessage.role === 'user') {\n                const searchContext = `\\n\\nWeb search results:\\n${webSearchResults.map((result)=>`- ${result.title}: ${result.snippet} (${result.link})`).join('\\n')}`;\n                lastMessage.content += searchContext;\n                // Add instruction for AI to format links properly\n                lastMessage.content += `\\n\\nPlease format any links in your response using markdown format [link text](url) and provide a comprehensive answer based on the search results.`;\n            }\n        }\n        console.log('Valid messages:', validMessages);\n        if (validMessages.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_2__.NextResponse.json({\n                error: 'No valid messages provided'\n            }, {\n                status: 400\n            });\n        }\n        // Check if API key is configured\n        const apiKey = process.env.GOOGLE_GENERATIVE_AI_API_KEY;\n        console.log('API Key configured:', !!apiKey);\n        console.log('API Key value:', apiKey ? `${apiKey.substring(0, 10)}...` : 'Not set');\n        // Select model based on user choice\n        let selectedModelInstance;\n        let useCodeExecution = false;\n        if (selectedModel === 'qbit R2') {\n            selectedModelInstance = modelR2;\n            useCodeExecution = true;\n            console.log('Using qbit R2 with code execution capabilities');\n        } else {\n            selectedModelInstance = modelR1;\n            console.log('Using qbit R1 with thinking capabilities');\n        }\n        if (!apiKey || apiKey === 'your_google_api_key_here') {\n            console.log('No valid API key found, using mock response');\n            // Get current date and time for mock response\n            const now = new Date();\n            const currentDate = now.toLocaleDateString('en-US', {\n                weekday: 'long',\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric'\n            });\n            const currentTime = now.toLocaleTimeString('en-US', {\n                hour: '2-digit',\n                minute: '2-digit',\n                timeZoneName: 'short'\n            });\n            // Return a mock response for testing\n            const mockResponse = `Hello! I'm qbit, your AI assistant. I can see you said: \"${validMessages[validMessages.length - 1].content}\"\n\n📅 **Current Date & Time**: ${currentDate} at ${currentTime}\n\n🔑 **API Key Setup Required**\n\nTo get real AI responses with thinking capabilities, please:\n\n1. **Get a Google AI API key**: Visit https://makersuite.google.com/app/apikey\n2. **Update your .env.local file**: Replace the placeholder with your actual API key\n3. **Restart the server**: Stop and restart npm run dev\n\nCurrent status: ${apiKey ? 'API key found but invalid' : 'No API key configured'}\n\nFor now, I'm running in demo mode! 🚀`;\n            // Create a streaming response\n            const encoder = new TextEncoder();\n            const stream = new ReadableStream({\n                start (controller) {\n                    const chunks = mockResponse.split(' ');\n                    let index = 0;\n                    const sendChunk = ()=>{\n                        if (index < chunks.length) {\n                            const chunk = chunks[index] + (index < chunks.length - 1 ? ' ' : '');\n                            controller.enqueue(encoder.encode(`data: ${JSON.stringify({\n                                type: 'text-delta',\n                                textDelta: chunk\n                            })}\\n\\n`));\n                            index++;\n                            setTimeout(sendChunk, 100);\n                        } else {\n                            controller.enqueue(encoder.encode('data: [DONE]\\n\\n'));\n                            controller.close();\n                        }\n                    };\n                    sendChunk();\n                }\n            });\n            return new Response(stream, {\n                headers: {\n                    'Content-Type': 'text/plain; charset=utf-8',\n                    'Transfer-Encoding': 'chunked'\n                }\n            });\n        }\n        // Configure thinking based on model type - always use thinking for qbit R1\n        const thinkingConfig = modelType === 'thinking' ? {\n            providerOptions: {\n                google: {\n                    thinkingConfig: {\n                        thinkingBudget: 2048,\n                        includeThoughts: true\n                    }\n                }\n            }\n        } : {};\n        console.log('Using thinking config:', thinkingConfig);\n        console.log('Thinking config:', thinkingConfig);\n        // For thinking mode, use generateText to get reasoning, then create custom stream\n        if (modelType === 'thinking') {\n            console.log('Using thinking mode - generating text with reasoning');\n            // Import generateText for thinking mode\n            const { generateText } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ai */ \"(rsc)/./node_modules/ai/dist/index.mjs\"));\n            try {\n                // Get current date and time\n                const now = new Date();\n                const currentDate = now.toLocaleDateString('en-US', {\n                    weekday: 'long',\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric'\n                });\n                const currentTime = now.toLocaleTimeString('en-US', {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    timeZoneName: 'short'\n                });\n                const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n                // Add system message to make AI think more naturally\n                const messagesWithSystem = [\n                    {\n                        role: 'system',\n                        content: `You are qbit, a helpful assistant made by vatistas dimitris. You have full autonomy to decide what tools to use, what to search for, and how to respond. You can think freely and act independently to help users in the best way possible.\n\n**Current Date and Time:**\n- Date: ${currentDate}\n- Time: ${currentTime}\n- Timezone: ${timezone}\n\n**Model Capabilities:**\n- ${selectedModel === 'qbit R1' ? 'You have thinking and reasoning capabilities. You can analyze problems step by step and explain your thought process.' : 'You have code execution capabilities. You can write and run Python code to solve complex problems, perform calculations, and provide accurate results.'}\n\n**Available Tools:**\n- Web search: You can search the internet for current information\n- Code execution: ${useCodeExecution ? 'You can write and execute Python code' : 'Not available in this model'}\n- File analysis: You can analyze uploaded files\n- Current date/time: You have access to the current date and time information\n\n**Your Approach:**\n- Think independently and decide what tools you need\n- Search for information when you need current data\n- Execute code when you need calculations or data processing\n- Use current date/time when relevant to provide timely information\n- Always be helpful and provide the best possible response`\n                    },\n                    ...validMessages\n                ];\n                // Prepare messages with files for Google AI\n                const messagesWithFiles = messagesWithSystem.map((msg)=>{\n                    // If the message content is already an array (with files), use it directly\n                    if (Array.isArray(msg.content)) {\n                        return {\n                            role: msg.role,\n                            content: msg.content\n                        };\n                    }\n                    // Otherwise, return the message as is\n                    return msg;\n                });\n                // Generate text with reasoning or code execution\n                let text, reasoning, toolCalls, toolResults;\n                try {\n                    if (useCodeExecution) {\n                        // Use R2 with code execution\n                        const result = await generateText({\n                            model: selectedModelInstance,\n                            tools: {\n                                code_execution: _ai_sdk_google_internal__WEBPACK_IMPORTED_MODULE_1__.googleTools.codeExecution({})\n                            },\n                            messages: messagesWithFiles,\n                            ...thinkingConfig\n                        });\n                        text = result.text;\n                        reasoning = result.reasoning;\n                        toolCalls = result.toolCalls;\n                        toolResults = result.toolResults;\n                        console.log('Code execution result:', {\n                            toolCalls,\n                            toolResults\n                        });\n                    } else {\n                        // Use R1 with thinking\n                        const result = await generateText({\n                            model: selectedModelInstance,\n                            messages: messagesWithFiles,\n                            ...thinkingConfig\n                        });\n                        text = result.text;\n                        reasoning = result.reasoning;\n                    }\n                } catch (error) {\n                    console.error('Error generating text with reasoning:', error);\n                    // Handle API rate limits and other errors gracefully\n                    if (error.statusCode === 429 || error.message?.includes('quota')) {\n                        text = `I'm currently experiencing high demand and can't process your request right now. This is likely due to API rate limits. \n\n**What you can do:**\n- Try again in a few minutes\n- Check your API key configuration\n- Consider upgrading your API plan if you're hitting limits\n\nFor now, I can still help with general questions that don't require real-time data.`;\n                        reasoning = [\n                            {\n                                type: 'reasoning',\n                                text: '**API Rate Limit Encountered**\\n\\nThe user\\'s request hit API rate limits. I need to explain this clearly and provide helpful alternatives while maintaining a supportive tone.'\n                            }\n                        ];\n                    } else {\n                        text = `I encountered an error while processing your request: ${error.message || 'Unknown error'}. \n\nPlease try again, and if the problem persists, check your API configuration.`;\n                        reasoning = [\n                            {\n                                type: 'reasoning',\n                                text: '**Error Handling**\\n\\nAn unexpected error occurred. I should inform the user clearly and suggest next steps.'\n                            }\n                        ];\n                    }\n                }\n                console.log('Generated text with reasoning:', {\n                    text,\n                    reasoning\n                });\n                // Create a custom stream that includes thinking data\n                const encoder = new TextEncoder();\n                const stream = new ReadableStream({\n                    start (controller) {\n                        try {\n                            // First, send thinking data if available\n                            if (reasoning && reasoning.length > 0) {\n                                console.log('Sending thinking data:', reasoning);\n                                // Extract the reasoning text from the array\n                                const reasoningText = reasoning.map((r)=>r.text || r.content || '').join('\\n\\n');\n                                // Natural thinking content - just the AI's actual thoughts\n                                const enhancedThinking = `🧠 **My Thinking Process**\n\n${reasoningText}`;\n                                const thinkingData = {\n                                    type: 'thinking',\n                                    content: enhancedThinking,\n                                    time: 2\n                                };\n                                controller.enqueue(encoder.encode(`data: ${JSON.stringify(thinkingData)}\\n\\n`));\n                            } else {\n                                // Send a default thinking message if no reasoning is provided\n                                console.log('No reasoning data, sending default thinking');\n                                const thinkingData = {\n                                    type: 'thinking',\n                                    content: `🧠 **My Thinking Process**\n\nI'm processing your request and thinking about the best way to respond...`,\n                                    time: 1\n                                };\n                                controller.enqueue(encoder.encode(`data: ${JSON.stringify(thinkingData)}\\n\\n`));\n                            }\n                            // Send code execution results if available\n                            if (toolResults && toolResults.length > 0) {\n                                console.log('Sending code execution results:', toolResults);\n                                const codeResults = toolResults.map((result)=>{\n                                    if (result.toolName === 'code_execution') {\n                                        return `💻 **Code Execution Result**\n\n\\`\\`\\`python\n${result.args?.code || 'Code executed'}\n\\`\\`\\`\n\n**Output:**\n\\`\\`\\`\n${result.result || 'No output'}\n\\`\\`\\``;\n                                    }\n                                    return '';\n                                }).filter(Boolean).join('\\n\\n');\n                                if (codeResults) {\n                                    const codeData = {\n                                        type: 'code-execution',\n                                        content: codeResults,\n                                        time: 1\n                                    };\n                                    controller.enqueue(encoder.encode(`data: ${JSON.stringify(codeData)}\\n\\n`));\n                                }\n                            }\n                            // Then send the text response\n                            const textChunks = text.split(' ');\n                            let index = 0;\n                            const sendTextChunk = ()=>{\n                                if (index < textChunks.length) {\n                                    const chunk = textChunks[index] + (index < textChunks.length - 1 ? ' ' : '');\n                                    controller.enqueue(encoder.encode(`data: ${JSON.stringify({\n                                        type: 'text-delta',\n                                        textDelta: chunk\n                                    })}\\n\\n`));\n                                    index++;\n                                    setTimeout(sendTextChunk, 20);\n                                } else {\n                                    controller.enqueue(encoder.encode('data: [DONE]\\n\\n'));\n                                    controller.close();\n                                }\n                            };\n                            sendTextChunk();\n                        } catch (error) {\n                            console.error('Streaming error:', error);\n                            controller.error(error);\n                        }\n                    }\n                });\n                return new Response(stream, {\n                    headers: {\n                        'Content-Type': 'text/plain; charset=utf-8',\n                        'Transfer-Encoding': 'chunked'\n                    }\n                });\n            } catch (error) {\n                console.error('Error generating text with reasoning:', error);\n            // Fallback to regular streaming\n            }\n        }\n        // Get current date and time for non-thinking mode\n        const now = new Date();\n        const currentDate = now.toLocaleDateString('en-US', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        });\n        const currentTime = now.toLocaleTimeString('en-US', {\n            hour: '2-digit',\n            minute: '2-digit',\n            timeZoneName: 'short'\n        });\n        const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        // Add system message with date/time context for non-thinking mode\n        const messagesWithSystem = [\n            {\n                role: 'system',\n                content: `You are qbit, a helpful assistant made by vatistas dimitris.\n\n**Current Date and Time:**\n- Date: ${currentDate}\n- Time: ${currentTime}\n- Timezone: ${timezone}\n\nYou have access to current date and time information. Use this when relevant to provide timely responses.`\n            },\n            ...validMessages\n        ];\n        // Prepare messages with files for non-thinking mode\n        const messagesWithFiles = messagesWithSystem.map((msg)=>{\n            if (msg.files && msg.files.length > 0) {\n                // Convert files to Google AI format\n                const fileContents = msg.files.map((file)=>({\n                        type: 'file',\n                        data: file.data,\n                        mediaType: file.mediaType\n                    }));\n                return {\n                    role: msg.role,\n                    content: [\n                        {\n                            type: 'text',\n                            text: msg.content\n                        },\n                        ...fileContents\n                    ]\n                };\n            }\n            return msg;\n        });\n        // Generate streaming response for non-thinking mode\n        try {\n            const result = await (0,ai__WEBPACK_IMPORTED_MODULE_3__.streamText)({\n                model: modelR1,\n                messages: messagesWithFiles,\n                ...thinkingConfig\n            });\n            console.log('Stream result created');\n            console.log('Result type:', typeof result);\n            console.log('Result methods:', Object.getOwnPropertyNames(result));\n            // Return the streaming response in AI SDK format for non-thinking mode\n            return result.toTextStreamResponse();\n        } catch (error) {\n            console.error('Error in streaming response:', error);\n            // Handle API rate limits and other errors gracefully\n            let errorMessage = 'I encountered an error while processing your request.';\n            if (error.statusCode === 429 || error.message?.includes('quota')) {\n                errorMessage = `I'm currently experiencing high demand and can't process your request right now. This is likely due to API rate limits. \n\n**What you can do:**\n- Try again in a few minutes\n- Check your API key configuration\n- Consider upgrading your API plan if you're hitting limits\n\nFor now, I can still help with general questions that don't require real-time data.`;\n            } else {\n                errorMessage = `I encountered an error while processing your request: ${error.message || 'Unknown error'}. \n\nPlease try again, and if the problem persists, check your API configuration.`;\n            }\n            // Create a simple error response\n            const encoder = new TextEncoder();\n            const stream = new ReadableStream({\n                start (controller) {\n                    const chunks = errorMessage.split(' ');\n                    let index = 0;\n                    const sendChunk = ()=>{\n                        if (index < chunks.length) {\n                            const chunk = chunks[index] + (index < chunks.length - 1 ? ' ' : '');\n                            controller.enqueue(encoder.encode(`data: ${JSON.stringify({\n                                type: 'text-delta',\n                                textDelta: chunk\n                            })}\\n\\n`));\n                            index++;\n                            setTimeout(sendChunk, 50);\n                        } else {\n                            controller.enqueue(encoder.encode('data: [DONE]\\n\\n'));\n                            controller.close();\n                        }\n                    };\n                    sendChunk();\n                }\n            });\n            return new Response(stream, {\n                headers: {\n                    'Content-Type': 'text/plain; charset=utf-8',\n                    'Transfer-Encoding': 'chunked'\n                }\n            });\n        }\n    } catch (error) {\n        console.error('Error in chat API:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_2__.NextResponse.json({\n            error: 'Failed to generate response',\n            details: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/route.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@ai-sdk/google":
/*!*********************************!*\
  !*** external "@ai-sdk/google" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = import("@ai-sdk/google");;

/***/ }),

/***/ "@ai-sdk/google/internal":
/*!******************************************!*\
  !*** external "@ai-sdk/google/internal" ***!
  \******************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@ai-sdk/google/internal");;

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@opentelemetry","vendor-chunks/zod","vendor-chunks/ai","vendor-chunks/@ai-sdk","vendor-chunks/zod-to-json-schema","vendor-chunks/eventsource-parser"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5Cant10%5CDownloads%5CQbitAI-main%5CQbitAI-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cant10%5CDownloads%5CQbitAI-main%5CQbitAI-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();